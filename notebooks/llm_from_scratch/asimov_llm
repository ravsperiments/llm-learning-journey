{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":12201425,"sourceType":"datasetVersion","datasetId":7685774}],"dockerImageVersionId":31040,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# ===========================\n# ðŸ“¦ DATA PREP MODULE\n# ===========================\n# Plan:\n# - read and tokenize data\n# - assign token ids to vocab\n# - create token id to vocab lookups and reverse look ups\n# ===========================\n# Contains:\n# - get_vocab_mappings()\n# - encode_data()\n# - create_training_sequences()\n# - batch_generator()\n# ===========================\n\n\nimport re\n\n# Load cleaned Asimov corpus\nwith open(\"/kaggle/input/asimov/asimov_cleaned.txt\", \"r\", encoding=\"utf-8\") as f:\n    text = f.read()\n\n# tokenize data using python regex function\npattern = r\"([,\\.;\\?/\\-!_\\\"\\'<>\\(\\)\\[\\]\\{\\}\\*\\+\\=\\&\\%\\$\\#\\@\\~]|\\s+)\" # The regex pattern to split by (comma or semicolon or space)\n\ntokens = [t for t in re.split(pattern, text) if t.strip()]\nunique_tokens = set(tokens)\n\nprint(len(unique_tokens))\n\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-03T03:24:38.540168Z","iopub.execute_input":"2025-07-03T03:24:38.540639Z","iopub.status.idle":"2025-07-03T03:24:40.219499Z","shell.execute_reply.started":"2025-07-03T03:24:38.540606Z","shell.execute_reply":"2025-07-03T03:24:40.218676Z"}},"outputs":[{"name":"stdout","text":"44684\n","output_type":"stream"}],"execution_count":13},{"cell_type":"code","source":"print(unique_tokens.type)","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}